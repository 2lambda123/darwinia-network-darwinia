// This file is part of Darwinia.
//
// Copyright (C) 2018-2023 Darwinia Network
// SPDX-License-Identifier: GPL-3.0
//
// Darwinia is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Darwinia is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for darwinia_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-24, STEPS: `2`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `inv.cafe`, CPU: `13th Gen Intel(R) Core(TM) i9-13900K`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("pangolin-local"), DB CACHE: 1024

// Executed Command:
// target/release/darwinia
// benchmark
// pallet
// --header
// .maintain/license-header
// --template
// .maintain/pallet-weight-template.hbs
// --execution
// wasm
// --heap-pages
// 4096
// --chain
// pangolin-local
// --output
// pallet/staking/src/weights.rs
// --extrinsic
// *
// --pallet
// darwinia-staking

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(missing_docs)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for darwinia_staking.
pub trait WeightInfo {
	fn stake(x: u32, ) -> Weight;
	fn unstake(x: u32, ) -> Weight;
	fn restake(x: u32, ) -> Weight;
	fn claim() -> Weight;
	fn collect() -> Weight;
	fn nominate() -> Weight;
	fn chill() -> Weight;
	fn set_collator_count() -> Weight;
}

/// Weights for darwinia_staking using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: DarwiniaStaking Ledgers (r:1 w:1)
	/// Proof: DarwiniaStaking Ledgers (max_values: None, max_size: Some(840), added: 3315, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: DarwiniaStaking RingPool (r:1 w:1)
	/// Proof: DarwiniaStaking RingPool (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Assets Asset (r:1 w:1)
	/// Proof: Assets Asset (max_values: None, max_size: Some(166), added: 2641, mode: MaxEncodedLen)
	/// Storage: Assets Account (r:2 w:2)
	/// Proof: Assets Account (max_values: None, max_size: Some(94), added: 2569, mode: MaxEncodedLen)
	/// Storage: DarwiniaStaking KtonPool (r:1 w:1)
	/// Proof: DarwiniaStaking KtonPool (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Deposit Deposits (r:1 w:1)
	/// Proof: Deposit Deposits (max_values: None, max_size: Some(853), added: 3328, mode: MaxEncodedLen)
	/// The range of component `x` is `[0, 255]`.
	fn stake(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2654 + x * (3 ±0)`
		//  Estimated: `18035`
		// Minimum execution time: 78_209 nanoseconds.
		Weight::from_parts(134_414_000, 0)
			.saturating_add(Weight::from_parts(18035, 0))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	/// Storage: DarwiniaStaking Ledgers (r:1 w:1)
	/// Proof: DarwiniaStaking Ledgers (max_values: None, max_size: Some(840), added: 3315, mode: MaxEncodedLen)
	/// Storage: DarwiniaStaking RingPool (r:1 w:1)
	/// Proof: DarwiniaStaking RingPool (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: DarwiniaStaking KtonPool (r:1 w:1)
	/// Proof: DarwiniaStaking KtonPool (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Deposit Deposits (r:1 w:0)
	/// Proof: Deposit Deposits (max_values: None, max_size: Some(853), added: 3328, mode: MaxEncodedLen)
	/// The range of component `x` is `[0, 255]`.
	fn unstake(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1538 + x * (3 ±0)`
		//  Estimated: `7665`
		// Minimum execution time: 26_936 nanoseconds.
		Weight::from_parts(66_646_000, 0)
			.saturating_add(Weight::from_parts(7665, 0))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: DarwiniaStaking Ledgers (r:1 w:1)
	/// Proof: DarwiniaStaking Ledgers (max_values: None, max_size: Some(840), added: 3315, mode: MaxEncodedLen)
	/// Storage: DarwiniaStaking RingPool (r:1 w:1)
	/// Proof: DarwiniaStaking RingPool (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: DarwiniaStaking KtonPool (r:1 w:1)
	/// Proof: DarwiniaStaking KtonPool (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Deposit Deposits (r:1 w:0)
	/// Proof: Deposit Deposits (max_values: None, max_size: Some(853), added: 3328, mode: MaxEncodedLen)
	/// The range of component `x` is `[0, 255]`.
	fn restake(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1259 + x * (4 ±0)`
		//  Estimated: `7665`
		// Minimum execution time: 15_250 nanoseconds.
		Weight::from_parts(53_850_000, 0)
			.saturating_add(Weight::from_parts(7665, 0))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: DarwiniaStaking Ledgers (r:1 w:1)
	/// Proof: DarwiniaStaking Ledgers (max_values: None, max_size: Some(840), added: 3315, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: Assets Asset (r:1 w:1)
	/// Proof: Assets Asset (max_values: None, max_size: Some(166), added: 2641, mode: MaxEncodedLen)
	/// Storage: Assets Account (r:2 w:2)
	/// Proof: Assets Account (max_values: None, max_size: Some(94), added: 2569, mode: MaxEncodedLen)
	/// Storage: Deposit Deposits (r:1 w:1)
	/// Proof: Deposit Deposits (max_values: None, max_size: Some(853), added: 3328, mode: MaxEncodedLen)
	fn claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3984`
		//  Estimated: `17013`
		// Minimum execution time: 120_477 nanoseconds.
		Weight::from_parts(120_477_000, 0)
			.saturating_add(Weight::from_parts(17013, 0))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: DarwiniaStaking Collators (r:1 w:1)
	/// Proof: DarwiniaStaking Collators (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	fn collect() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1071`
		//  Estimated: `2507`
		// Minimum execution time: 22_946 nanoseconds.
		Weight::from_parts(22_946_000, 0)
			.saturating_add(Weight::from_parts(2507, 0))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: DarwiniaStaking Ledgers (r:1 w:0)
	/// Proof: DarwiniaStaking Ledgers (max_values: None, max_size: Some(840), added: 3315, mode: MaxEncodedLen)
	/// Storage: DarwiniaStaking Collators (r:1 w:0)
	/// Proof: DarwiniaStaking Collators (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: DarwiniaStaking Nominators (r:1 w:1)
	/// Proof: DarwiniaStaking Nominators (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	fn nominate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1376`
		//  Estimated: `8345`
		// Minimum execution time: 17_520 nanoseconds.
		Weight::from_parts(17_520_000, 0)
			.saturating_add(Weight::from_parts(8345, 0))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: DarwiniaStaking Nominators (r:0 w:1)
	/// Proof: DarwiniaStaking Nominators (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: DarwiniaStaking Collators (r:0 w:1)
	/// Proof: DarwiniaStaking Collators (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	fn chill() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `645`
		//  Estimated: `0`
		// Minimum execution time: 6_802 nanoseconds.
		Weight::from_parts(6_802_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: DarwiniaStaking CollatorCount (r:0 w:1)
	/// Proof: DarwiniaStaking CollatorCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn set_collator_count() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `645`
		//  Estimated: `0`
		// Minimum execution time: 16_003 nanoseconds.
		Weight::from_parts(16_003_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: DarwiniaStaking Ledgers (r:1 w:1)
	/// Proof: DarwiniaStaking Ledgers (max_values: None, max_size: Some(840), added: 3315, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: DarwiniaStaking RingPool (r:1 w:1)
	/// Proof: DarwiniaStaking RingPool (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Assets Asset (r:1 w:1)
	/// Proof: Assets Asset (max_values: None, max_size: Some(166), added: 2641, mode: MaxEncodedLen)
	/// Storage: Assets Account (r:2 w:2)
	/// Proof: Assets Account (max_values: None, max_size: Some(94), added: 2569, mode: MaxEncodedLen)
	/// Storage: DarwiniaStaking KtonPool (r:1 w:1)
	/// Proof: DarwiniaStaking KtonPool (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Deposit Deposits (r:1 w:1)
	/// Proof: Deposit Deposits (max_values: None, max_size: Some(853), added: 3328, mode: MaxEncodedLen)
	/// The range of component `x` is `[0, 255]`.
	fn stake(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2654 + x * (3 ±0)`
		//  Estimated: `18035`
		// Minimum execution time: 78_209 nanoseconds.
		Weight::from_parts(134_414_000, 0)
			.saturating_add(Weight::from_parts(18035, 0))
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
	}
	/// Storage: DarwiniaStaking Ledgers (r:1 w:1)
	/// Proof: DarwiniaStaking Ledgers (max_values: None, max_size: Some(840), added: 3315, mode: MaxEncodedLen)
	/// Storage: DarwiniaStaking RingPool (r:1 w:1)
	/// Proof: DarwiniaStaking RingPool (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: DarwiniaStaking KtonPool (r:1 w:1)
	/// Proof: DarwiniaStaking KtonPool (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Deposit Deposits (r:1 w:0)
	/// Proof: Deposit Deposits (max_values: None, max_size: Some(853), added: 3328, mode: MaxEncodedLen)
	/// The range of component `x` is `[0, 255]`.
	fn unstake(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1538 + x * (3 ±0)`
		//  Estimated: `7665`
		// Minimum execution time: 26_936 nanoseconds.
		Weight::from_parts(66_646_000, 0)
			.saturating_add(Weight::from_parts(7665, 0))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: DarwiniaStaking Ledgers (r:1 w:1)
	/// Proof: DarwiniaStaking Ledgers (max_values: None, max_size: Some(840), added: 3315, mode: MaxEncodedLen)
	/// Storage: DarwiniaStaking RingPool (r:1 w:1)
	/// Proof: DarwiniaStaking RingPool (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: DarwiniaStaking KtonPool (r:1 w:1)
	/// Proof: DarwiniaStaking KtonPool (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Deposit Deposits (r:1 w:0)
	/// Proof: Deposit Deposits (max_values: None, max_size: Some(853), added: 3328, mode: MaxEncodedLen)
	/// The range of component `x` is `[0, 255]`.
	fn restake(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1259 + x * (4 ±0)`
		//  Estimated: `7665`
		// Minimum execution time: 15_250 nanoseconds.
		Weight::from_parts(53_850_000, 0)
			.saturating_add(Weight::from_parts(7665, 0))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: DarwiniaStaking Ledgers (r:1 w:1)
	/// Proof: DarwiniaStaking Ledgers (max_values: None, max_size: Some(840), added: 3315, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: Assets Asset (r:1 w:1)
	/// Proof: Assets Asset (max_values: None, max_size: Some(166), added: 2641, mode: MaxEncodedLen)
	/// Storage: Assets Account (r:2 w:2)
	/// Proof: Assets Account (max_values: None, max_size: Some(94), added: 2569, mode: MaxEncodedLen)
	/// Storage: Deposit Deposits (r:1 w:1)
	/// Proof: Deposit Deposits (max_values: None, max_size: Some(853), added: 3328, mode: MaxEncodedLen)
	fn claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3984`
		//  Estimated: `17013`
		// Minimum execution time: 120_477 nanoseconds.
		Weight::from_parts(120_477_000, 0)
			.saturating_add(Weight::from_parts(17013, 0))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: DarwiniaStaking Collators (r:1 w:1)
	/// Proof: DarwiniaStaking Collators (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	fn collect() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1071`
		//  Estimated: `2507`
		// Minimum execution time: 22_946 nanoseconds.
		Weight::from_parts(22_946_000, 0)
			.saturating_add(Weight::from_parts(2507, 0))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: DarwiniaStaking Ledgers (r:1 w:0)
	/// Proof: DarwiniaStaking Ledgers (max_values: None, max_size: Some(840), added: 3315, mode: MaxEncodedLen)
	/// Storage: DarwiniaStaking Collators (r:1 w:0)
	/// Proof: DarwiniaStaking Collators (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: DarwiniaStaking Nominators (r:1 w:1)
	/// Proof: DarwiniaStaking Nominators (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	fn nominate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1376`
		//  Estimated: `8345`
		// Minimum execution time: 17_520 nanoseconds.
		Weight::from_parts(17_520_000, 0)
			.saturating_add(Weight::from_parts(8345, 0))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: DarwiniaStaking Nominators (r:0 w:1)
	/// Proof: DarwiniaStaking Nominators (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: DarwiniaStaking Collators (r:0 w:1)
	/// Proof: DarwiniaStaking Collators (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	fn chill() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `645`
		//  Estimated: `0`
		// Minimum execution time: 6_802 nanoseconds.
		Weight::from_parts(6_802_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: DarwiniaStaking CollatorCount (r:0 w:1)
	/// Proof: DarwiniaStaking CollatorCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn set_collator_count() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `645`
		//  Estimated: `0`
		// Minimum execution time: 16_003 nanoseconds.
		Weight::from_parts(16_003_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
