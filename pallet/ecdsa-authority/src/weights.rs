// This file is part of Darwinia.
//
// Copyright (C) 2018-2023 Darwinia Network
// SPDX-License-Identifier: GPL-3.0
//
// Darwinia is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Darwinia is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for darwinia_ecdsa_authority
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-17, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("pangolin-dev"), DB CACHE: 1024

// Executed Command:
// target/release/darwinia
// benchmark
// pallet
// --header
// .maintain/license-header
// --template
// .maintain/pallet-weight-template.hbs
// --heap-pages
// 4096
// --chain
// pangolin-dev
// --output
// pallet/ecdsa-authority/src/weights.rs
// --extrinsic
// *
// --pallet
// darwinia-ecdsa-authority

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(missing_docs)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for darwinia_ecdsa_authority.
pub trait WeightInfo {
	fn on_initialize() -> Weight;
	fn add_authority() -> Weight;
	fn remove_authority() -> Weight;
	fn swap_authority() -> Weight;
	fn submit_authorities_change_signature() -> Weight;
	fn submit_new_message_root_signature() -> Weight;
}

/// Weights for darwinia_ecdsa_authority using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `EcdsaAuthority::AuthoritiesChangeToSign` (r:1 w:0)
	/// Proof: `EcdsaAuthority::AuthoritiesChangeToSign` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::MessageRootToSign` (r:1 w:1)
	/// Proof: `EcdsaAuthority::MessageRootToSign` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::Nonce` (r:1 w:0)
	/// Proof: `EcdsaAuthority::Nonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `154`
		//  Estimated: `1639`
		// Minimum execution time: 9_237 nanoseconds.
		Weight::from_parts(9_623_000, 0)
			.saturating_add(Weight::from_parts(1639, 0))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `EcdsaAuthority::AuthoritiesChangeToSign` (r:1 w:1)
	/// Proof: `EcdsaAuthority::AuthoritiesChangeToSign` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::NextAuthorities` (r:1 w:1)
	/// Proof: `EcdsaAuthority::NextAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::Nonce` (r:1 w:0)
	/// Proof: `EcdsaAuthority::Nonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn add_authority() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `154`
		//  Estimated: `1639`
		// Minimum execution time: 12_402 nanoseconds.
		Weight::from_parts(12_961_000, 0)
			.saturating_add(Weight::from_parts(1639, 0))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `EcdsaAuthority::AuthoritiesChangeToSign` (r:1 w:1)
	/// Proof: `EcdsaAuthority::AuthoritiesChangeToSign` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::NextAuthorities` (r:1 w:1)
	/// Proof: `EcdsaAuthority::NextAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::Nonce` (r:1 w:0)
	/// Proof: `EcdsaAuthority::Nonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn remove_authority() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `233`
		//  Estimated: `1718`
		// Minimum execution time: 13_419 nanoseconds.
		Weight::from_parts(14_072_000, 0)
			.saturating_add(Weight::from_parts(1718, 0))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `EcdsaAuthority::AuthoritiesChangeToSign` (r:1 w:1)
	/// Proof: `EcdsaAuthority::AuthoritiesChangeToSign` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::NextAuthorities` (r:1 w:1)
	/// Proof: `EcdsaAuthority::NextAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::Nonce` (r:1 w:0)
	/// Proof: `EcdsaAuthority::Nonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn swap_authority() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `334`
		//  Estimated: `1819`
		// Minimum execution time: 13_750 nanoseconds.
		Weight::from_parts(14_405_000, 0)
			.saturating_add(Weight::from_parts(1819, 0))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `EcdsaAuthority::Authorities` (r:1 w:1)
	/// Proof: `EcdsaAuthority::Authorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::AuthoritiesChangeToSign` (r:1 w:1)
	/// Proof: `EcdsaAuthority::AuthoritiesChangeToSign` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::NextAuthorities` (r:1 w:0)
	/// Proof: `EcdsaAuthority::NextAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::Nonce` (r:1 w:1)
	/// Proof: `EcdsaAuthority::Nonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::MessageRootToSign` (r:0 w:1)
	/// Proof: `EcdsaAuthority::MessageRootToSign` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn submit_authorities_change_signature() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `318`
		//  Estimated: `1803`
		// Minimum execution time: 39_035 nanoseconds.
		Weight::from_parts(41_283_000, 0)
			.saturating_add(Weight::from_parts(1803, 0))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `EcdsaAuthority::Authorities` (r:1 w:0)
	/// Proof: `EcdsaAuthority::Authorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::MessageRootToSign` (r:1 w:1)
	/// Proof: `EcdsaAuthority::MessageRootToSign` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn submit_new_message_root_signature() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `312`
		//  Estimated: `1797`
		// Minimum execution time: 29_384 nanoseconds.
		Weight::from_parts(29_975_000, 0)
			.saturating_add(Weight::from_parts(1797, 0))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `EcdsaAuthority::AuthoritiesChangeToSign` (r:1 w:0)
	/// Proof: `EcdsaAuthority::AuthoritiesChangeToSign` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::MessageRootToSign` (r:1 w:1)
	/// Proof: `EcdsaAuthority::MessageRootToSign` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::Nonce` (r:1 w:0)
	/// Proof: `EcdsaAuthority::Nonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `154`
		//  Estimated: `1639`
		// Minimum execution time: 9_237 nanoseconds.
		Weight::from_parts(9_623_000, 0)
			.saturating_add(Weight::from_parts(1639, 0))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `EcdsaAuthority::AuthoritiesChangeToSign` (r:1 w:1)
	/// Proof: `EcdsaAuthority::AuthoritiesChangeToSign` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::NextAuthorities` (r:1 w:1)
	/// Proof: `EcdsaAuthority::NextAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::Nonce` (r:1 w:0)
	/// Proof: `EcdsaAuthority::Nonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn add_authority() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `154`
		//  Estimated: `1639`
		// Minimum execution time: 12_402 nanoseconds.
		Weight::from_parts(12_961_000, 0)
			.saturating_add(Weight::from_parts(1639, 0))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `EcdsaAuthority::AuthoritiesChangeToSign` (r:1 w:1)
	/// Proof: `EcdsaAuthority::AuthoritiesChangeToSign` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::NextAuthorities` (r:1 w:1)
	/// Proof: `EcdsaAuthority::NextAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::Nonce` (r:1 w:0)
	/// Proof: `EcdsaAuthority::Nonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn remove_authority() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `233`
		//  Estimated: `1718`
		// Minimum execution time: 13_419 nanoseconds.
		Weight::from_parts(14_072_000, 0)
			.saturating_add(Weight::from_parts(1718, 0))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `EcdsaAuthority::AuthoritiesChangeToSign` (r:1 w:1)
	/// Proof: `EcdsaAuthority::AuthoritiesChangeToSign` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::NextAuthorities` (r:1 w:1)
	/// Proof: `EcdsaAuthority::NextAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::Nonce` (r:1 w:0)
	/// Proof: `EcdsaAuthority::Nonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn swap_authority() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `334`
		//  Estimated: `1819`
		// Minimum execution time: 13_750 nanoseconds.
		Weight::from_parts(14_405_000, 0)
			.saturating_add(Weight::from_parts(1819, 0))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `EcdsaAuthority::Authorities` (r:1 w:1)
	/// Proof: `EcdsaAuthority::Authorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::AuthoritiesChangeToSign` (r:1 w:1)
	/// Proof: `EcdsaAuthority::AuthoritiesChangeToSign` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::NextAuthorities` (r:1 w:0)
	/// Proof: `EcdsaAuthority::NextAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::Nonce` (r:1 w:1)
	/// Proof: `EcdsaAuthority::Nonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::MessageRootToSign` (r:0 w:1)
	/// Proof: `EcdsaAuthority::MessageRootToSign` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn submit_authorities_change_signature() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `318`
		//  Estimated: `1803`
		// Minimum execution time: 39_035 nanoseconds.
		Weight::from_parts(41_283_000, 0)
			.saturating_add(Weight::from_parts(1803, 0))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `EcdsaAuthority::Authorities` (r:1 w:0)
	/// Proof: `EcdsaAuthority::Authorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::MessageRootToSign` (r:1 w:1)
	/// Proof: `EcdsaAuthority::MessageRootToSign` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn submit_new_message_root_signature() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `312`
		//  Estimated: `1797`
		// Minimum execution time: 29_384 nanoseconds.
		Weight::from_parts(29_975_000, 0)
			.saturating_add(Weight::from_parts(1797, 0))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
