// This file is part of Darwinia.
//
// Copyright (C) 2018-2023 Darwinia Network
// SPDX-License-Identifier: GPL-3.0
//
// Darwinia is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Darwinia is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_bridge_parachains`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-19, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `inv.cafe`, CPU: `13th Gen Intel(R) Core(TM) i9-13900K`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("crab-local"), DB CACHE: 1024

// Executed Command:
// target/release/darwinia
// benchmark
// pallet
// --header
// .maintain/license-header
// --execution
// wasm
// --heap-pages
// 4096
// --chain
// crab-local
// --output
// runtime/crab/src/weights
// --extrinsic
// *
// --pallet
// *
// --steps
// 50
// --repeat
// 20

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_bridge_parachains`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_bridge_parachains::WeightInfo for WeightInfo<T> {
	/// Storage: BridgePolkadotParachain PalletOperatingMode (r:1 w:0)
	/// Proof: BridgePolkadotParachain PalletOperatingMode (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	/// Storage: BridgePolkadotGrandpa ImportedHeaders (r:1 w:0)
	/// Proof: BridgePolkadotGrandpa ImportedHeaders (max_values: None, max_size: Some(65568), added: 68043, mode: MaxEncodedLen)
	/// Storage: BridgePolkadotParachain ParasInfo (r:1023 w:1023)
	/// Proof: BridgePolkadotParachain ParasInfo (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
	/// Storage: BridgePolkadotParachain ImportedParaHashes (r:1023 w:1023)
	/// Proof: BridgePolkadotParachain ImportedParaHashes (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// Storage: BridgePolkadotParachain ImportedParaHeads (r:0 w:1023)
	/// Proof: BridgePolkadotParachain ImportedParaHeads (max_values: None, max_size: Some(1092), added: 3567, mode: MaxEncodedLen)
	/// The range of component `p` is `[1, 1024]`.
	fn submit_parachain_heads_with_n_parachains(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `485`
		//  Estimated: `72499 + p * (5074 Â±0)`
		// Minimum execution time: 23_588_000 picoseconds.
		Weight::from_parts(24_031_000, 0)
			.saturating_add(Weight::from_parts(0, 72499))
			// Standard Error: 23_116
			.saturating_add(Weight::from_parts(18_957_485, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(p.into())))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_parts(0, 5074).saturating_mul(p.into()))
	}
	/// Storage: BridgePolkadotParachain PalletOperatingMode (r:1 w:0)
	/// Proof: BridgePolkadotParachain PalletOperatingMode (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	/// Storage: BridgePolkadotGrandpa ImportedHeaders (r:1 w:0)
	/// Proof: BridgePolkadotGrandpa ImportedHeaders (max_values: None, max_size: Some(65568), added: 68043, mode: MaxEncodedLen)
	/// Storage: BridgePolkadotParachain ParasInfo (r:1 w:1)
	/// Proof: BridgePolkadotParachain ParasInfo (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
	/// Storage: BridgePolkadotParachain ImportedParaHashes (r:1 w:1)
	/// Proof: BridgePolkadotParachain ImportedParaHashes (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// Storage: BridgePolkadotParachain ImportedParaHeads (r:0 w:1)
	/// Proof: BridgePolkadotParachain ImportedParaHeads (max_values: None, max_size: Some(1092), added: 3567, mode: MaxEncodedLen)
	fn submit_parachain_heads_with_1kb_proof() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `485`
		//  Estimated: `77573`
		// Minimum execution time: 29_118_000 picoseconds.
		Weight::from_parts(29_990_000, 0)
			.saturating_add(Weight::from_parts(0, 77573))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: BridgePolkadotParachain PalletOperatingMode (r:1 w:0)
	/// Proof: BridgePolkadotParachain PalletOperatingMode (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	/// Storage: BridgePolkadotGrandpa ImportedHeaders (r:1 w:0)
	/// Proof: BridgePolkadotGrandpa ImportedHeaders (max_values: None, max_size: Some(65568), added: 68043, mode: MaxEncodedLen)
	/// Storage: BridgePolkadotParachain ParasInfo (r:1 w:1)
	/// Proof: BridgePolkadotParachain ParasInfo (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
	/// Storage: BridgePolkadotParachain ImportedParaHashes (r:1 w:1)
	/// Proof: BridgePolkadotParachain ImportedParaHashes (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// Storage: BridgePolkadotParachain ImportedParaHeads (r:0 w:1)
	/// Proof: BridgePolkadotParachain ImportedParaHeads (max_values: None, max_size: Some(1092), added: 3567, mode: MaxEncodedLen)
	fn submit_parachain_heads_with_16kb_proof() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `485`
		//  Estimated: `77573`
		// Minimum execution time: 65_323_000 picoseconds.
		Weight::from_parts(68_631_000, 0)
			.saturating_add(Weight::from_parts(0, 77573))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}
