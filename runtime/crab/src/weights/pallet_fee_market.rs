// This file is part of Darwinia.
//
// Copyright (C) 2018-2023 Darwinia Network
// SPDX-License-Identifier: GPL-3.0
//
// Darwinia is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Darwinia is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_fee_market`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-16, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `inv.cafe`, CPU: `Intel(R) Core(TM) i9-14900KF`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("crab-dev")`, DB CACHE: 1024

// Executed Command:
// target/release/darwinia
// benchmark
// pallet
// --header
// .maintain/license-header
// --heap-pages
// 4096
// --chain
// crab-dev
// --output
// runtime/crab/src/weights
// --pallet
// *
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_fee_market`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_fee_market::WeightInfo for WeightInfo<T> {
	/// Storage: `DarwiniaFeeMarket::Relayers` (r:1 w:1)
	/// Proof: `DarwiniaFeeMarket::Relayers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `DarwiniaFeeMarket::RelayersMap` (r:10 w:1)
	/// Proof: `DarwiniaFeeMarket::RelayersMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DarwiniaFeeMarket::Orders` (r:1 w:0)
	/// Proof: `DarwiniaFeeMarket::Orders` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DarwiniaFeeMarket::AssignedRelayersNumber` (r:1 w:0)
	/// Proof: `DarwiniaFeeMarket::AssignedRelayersNumber` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `DarwiniaFeeMarket::AssignedRelayers` (r:0 w:1)
	/// Proof: `DarwiniaFeeMarket::AssignedRelayers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn enroll_and_lock_collateral() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1716`
		//  Estimated: `27456`
		// Minimum execution time: 86_589_000 picoseconds.
		Weight::from_parts(88_347_000, 0)
			.saturating_add(Weight::from_parts(0, 27456))
			.saturating_add(T::DbWeight::get().reads(16))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `DarwiniaFeeMarket::Relayers` (r:1 w:0)
	/// Proof: `DarwiniaFeeMarket::Relayers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `DarwiniaFeeMarket::RelayersMap` (r:10 w:1)
	/// Proof: `DarwiniaFeeMarket::RelayersMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `DarwiniaFeeMarket::Orders` (r:1 w:0)
	/// Proof: `DarwiniaFeeMarket::Orders` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DarwiniaFeeMarket::AssignedRelayersNumber` (r:1 w:0)
	/// Proof: `DarwiniaFeeMarket::AssignedRelayersNumber` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `DarwiniaFeeMarket::AssignedRelayers` (r:0 w:1)
	/// Proof: `DarwiniaFeeMarket::AssignedRelayers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn increase_locked_collateral() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1788`
		//  Estimated: `27528`
		// Minimum execution time: 81_882_000 picoseconds.
		Weight::from_parts(85_447_000, 0)
			.saturating_add(Weight::from_parts(0, 27528))
			.saturating_add(T::DbWeight::get().reads(16))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `DarwiniaFeeMarket::Relayers` (r:1 w:0)
	/// Proof: `DarwiniaFeeMarket::Relayers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `DarwiniaFeeMarket::RelayersMap` (r:10 w:1)
	/// Proof: `DarwiniaFeeMarket::RelayersMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DarwiniaFeeMarket::Orders` (r:1 w:0)
	/// Proof: `DarwiniaFeeMarket::Orders` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `DarwiniaFeeMarket::AssignedRelayersNumber` (r:1 w:0)
	/// Proof: `DarwiniaFeeMarket::AssignedRelayersNumber` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `DarwiniaFeeMarket::AssignedRelayers` (r:0 w:1)
	/// Proof: `DarwiniaFeeMarket::AssignedRelayers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn decrease_locked_collateral() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1788`
		//  Estimated: `27528`
		// Minimum execution time: 100_125_000 picoseconds.
		Weight::from_parts(102_875_000, 0)
			.saturating_add(Weight::from_parts(0, 27528))
			.saturating_add(T::DbWeight::get().reads(16))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `DarwiniaFeeMarket::Relayers` (r:1 w:0)
	/// Proof: `DarwiniaFeeMarket::Relayers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `DarwiniaFeeMarket::RelayersMap` (r:10 w:1)
	/// Proof: `DarwiniaFeeMarket::RelayersMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DarwiniaFeeMarket::Orders` (r:1 w:0)
	/// Proof: `DarwiniaFeeMarket::Orders` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DarwiniaFeeMarket::AssignedRelayersNumber` (r:1 w:0)
	/// Proof: `DarwiniaFeeMarket::AssignedRelayersNumber` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `DarwiniaFeeMarket::AssignedRelayers` (r:0 w:1)
	/// Proof: `DarwiniaFeeMarket::AssignedRelayers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_relay_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1369`
		//  Estimated: `27109`
		// Minimum execution time: 65_282_000 picoseconds.
		Weight::from_parts(67_692_000, 0)
			.saturating_add(Weight::from_parts(0, 27109))
			.saturating_add(T::DbWeight::get().reads(13))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `DarwiniaFeeMarket::Relayers` (r:1 w:1)
	/// Proof: `DarwiniaFeeMarket::Relayers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `DarwiniaFeeMarket::Orders` (r:1 w:0)
	/// Proof: `DarwiniaFeeMarket::Orders` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `DarwiniaFeeMarket::AssignedRelayers` (r:1 w:1)
	/// Proof: `DarwiniaFeeMarket::AssignedRelayers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `DarwiniaFeeMarket::RelayersMap` (r:9 w:1)
	/// Proof: `DarwiniaFeeMarket::RelayersMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DarwiniaFeeMarket::AssignedRelayersNumber` (r:1 w:0)
	/// Proof: `DarwiniaFeeMarket::AssignedRelayersNumber` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn cancel_enrollment() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1855`
		//  Estimated: `25120`
		// Minimum execution time: 83_724_000 picoseconds.
		Weight::from_parts(84_799_000, 0)
			.saturating_add(Weight::from_parts(0, 25120))
			.saturating_add(T::DbWeight::get().reads(16))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `DarwiniaFeeMarket::CollateralSlashProtect` (r:0 w:1)
	/// Proof: `DarwiniaFeeMarket::CollateralSlashProtect` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_slash_protect() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_622_000 picoseconds.
		Weight::from_parts(4_809_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `DarwiniaFeeMarket::Relayers` (r:1 w:0)
	/// Proof: `DarwiniaFeeMarket::Relayers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `DarwiniaFeeMarket::RelayersMap` (r:10 w:0)
	/// Proof: `DarwiniaFeeMarket::RelayersMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DarwiniaFeeMarket::Orders` (r:1 w:0)
	/// Proof: `DarwiniaFeeMarket::Orders` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DarwiniaFeeMarket::AssignedRelayers` (r:0 w:1)
	/// Proof: `DarwiniaFeeMarket::AssignedRelayers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `DarwiniaFeeMarket::AssignedRelayersNumber` (r:0 w:1)
	/// Proof: `DarwiniaFeeMarket::AssignedRelayersNumber` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_assigned_relayers_number() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1369`
		//  Estimated: `27109`
		// Minimum execution time: 63_365_000 picoseconds.
		Weight::from_parts(64_469_000, 0)
			.saturating_add(Weight::from_parts(0, 27109))
			.saturating_add(T::DbWeight::get().reads(12))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}
