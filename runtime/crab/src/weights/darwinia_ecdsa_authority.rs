// This file is part of Darwinia.
//
// Copyright (C) 2018-2023 Darwinia Network
// SPDX-License-Identifier: GPL-3.0
//
// Darwinia is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Darwinia is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `darwinia_ecdsa_authority`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-16, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `inv.cafe`, CPU: `Intel(R) Core(TM) i9-14900KF`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("crab-dev")`, DB CACHE: 1024

// Executed Command:
// target/release/darwinia
// benchmark
// pallet
// --header
// .maintain/license-header
// --heap-pages
// 4096
// --chain
// crab-dev
// --output
// runtime/crab/src/weights
// --pallet
// *
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `darwinia_ecdsa_authority`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> darwinia_ecdsa_authority::WeightInfo for WeightInfo<T> {
	/// Storage: `EcdsaAuthority::AuthoritiesChangeToSign` (r:1 w:0)
	/// Proof: `EcdsaAuthority::AuthoritiesChangeToSign` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::MessageRootToSign` (r:1 w:1)
	/// Proof: `EcdsaAuthority::MessageRootToSign` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::Nonce` (r:1 w:0)
	/// Proof: `EcdsaAuthority::Nonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `87`
		//  Estimated: `1572`
		// Minimum execution time: 9_452_000 picoseconds.
		Weight::from_parts(9_871_000, 0)
			.saturating_add(Weight::from_parts(0, 1572))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `EcdsaAuthority::AuthoritiesChangeToSign` (r:1 w:1)
	/// Proof: `EcdsaAuthority::AuthoritiesChangeToSign` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::NextAuthorities` (r:1 w:1)
	/// Proof: `EcdsaAuthority::NextAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::Nonce` (r:1 w:0)
	/// Proof: `EcdsaAuthority::Nonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn add_authority() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `87`
		//  Estimated: `1572`
		// Minimum execution time: 12_684_000 picoseconds.
		Weight::from_parts(13_393_000, 0)
			.saturating_add(Weight::from_parts(0, 1572))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `EcdsaAuthority::AuthoritiesChangeToSign` (r:1 w:1)
	/// Proof: `EcdsaAuthority::AuthoritiesChangeToSign` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::NextAuthorities` (r:1 w:1)
	/// Proof: `EcdsaAuthority::NextAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::Nonce` (r:1 w:0)
	/// Proof: `EcdsaAuthority::Nonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn remove_authority() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `166`
		//  Estimated: `1651`
		// Minimum execution time: 13_018_000 picoseconds.
		Weight::from_parts(13_743_000, 0)
			.saturating_add(Weight::from_parts(0, 1651))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `EcdsaAuthority::AuthoritiesChangeToSign` (r:1 w:1)
	/// Proof: `EcdsaAuthority::AuthoritiesChangeToSign` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::NextAuthorities` (r:1 w:1)
	/// Proof: `EcdsaAuthority::NextAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::Nonce` (r:1 w:0)
	/// Proof: `EcdsaAuthority::Nonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn swap_authority() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `267`
		//  Estimated: `1752`
		// Minimum execution time: 13_131_000 picoseconds.
		Weight::from_parts(14_140_000, 0)
			.saturating_add(Weight::from_parts(0, 1752))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `EcdsaAuthority::Authorities` (r:1 w:1)
	/// Proof: `EcdsaAuthority::Authorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::AuthoritiesChangeToSign` (r:1 w:1)
	/// Proof: `EcdsaAuthority::AuthoritiesChangeToSign` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::NextAuthorities` (r:1 w:0)
	/// Proof: `EcdsaAuthority::NextAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::Nonce` (r:1 w:1)
	/// Proof: `EcdsaAuthority::Nonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::MessageRootToSign` (r:0 w:1)
	/// Proof: `EcdsaAuthority::MessageRootToSign` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn submit_authorities_change_signature() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `251`
		//  Estimated: `1736`
		// Minimum execution time: 40_250_000 picoseconds.
		Weight::from_parts(41_304_000, 0)
			.saturating_add(Weight::from_parts(0, 1736))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `EcdsaAuthority::Authorities` (r:1 w:0)
	/// Proof: `EcdsaAuthority::Authorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EcdsaAuthority::MessageRootToSign` (r:1 w:1)
	/// Proof: `EcdsaAuthority::MessageRootToSign` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn submit_new_message_root_signature() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `245`
		//  Estimated: `1730`
		// Minimum execution time: 30_922_000 picoseconds.
		Weight::from_parts(31_844_000, 0)
			.saturating_add(Weight::from_parts(0, 1730))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
