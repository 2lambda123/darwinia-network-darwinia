// This file is part of Darwinia.
//
// Copyright (C) 2018-2023 Darwinia Network
// SPDX-License-Identifier: GPL-3.0
//
// Darwinia is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Darwinia is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_bridge_parachains`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-16, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `inv.cafe`, CPU: `Intel(R) Core(TM) i9-14900KF`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("pangolin-dev")`, DB CACHE: 1024

// Executed Command:
// target/release/darwinia
// benchmark
// pallet
// --header
// .maintain/license-header
// --heap-pages
// 4096
// --chain
// pangolin-dev
// --output
// runtime/pangolin/src/weights
// --pallet
// *
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_bridge_parachains`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_bridge_parachains::WeightInfo for WeightInfo<T> {
	/// Storage: `BridgeMoonbaseParachain::PalletOperatingMode` (r:1 w:0)
	/// Proof: `BridgeMoonbaseParachain::PalletOperatingMode` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `BridgeMoonbaseGrandpa::ImportedHeaders` (r:1 w:0)
	/// Proof: `BridgeMoonbaseGrandpa::ImportedHeaders` (`max_values`: None, `max_size`: Some(65568), added: 68043, mode: `MaxEncodedLen`)
	/// Storage: `BridgeMoonbaseParachain::ParasInfo` (r:1023 w:1023)
	/// Proof: `BridgeMoonbaseParachain::ParasInfo` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	/// Storage: `BridgeMoonbaseParachain::ImportedParaHashes` (r:1023 w:1023)
	/// Proof: `BridgeMoonbaseParachain::ImportedParaHashes` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `BridgeMoonbaseParachain::ImportedParaHeads` (r:0 w:1023)
	/// Proof: `BridgeMoonbaseParachain::ImportedParaHeads` (`max_values`: None, `max_size`: Some(1092), added: 3567, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 1024]`.
	fn submit_parachain_heads_with_n_parachains(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `451`
		//  Estimated: `69033 + p * (2539 Â±0)`
		// Minimum execution time: 21_291_000 picoseconds.
		Weight::from_parts(21_860_000, 0)
			.saturating_add(Weight::from_parts(0, 69033))
			// Standard Error: 19_392
			.saturating_add(Weight::from_parts(16_808_504, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(p.into())))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_parts(0, 2539).saturating_mul(p.into()))
	}
	/// Storage: `BridgeMoonbaseParachain::PalletOperatingMode` (r:1 w:0)
	/// Proof: `BridgeMoonbaseParachain::PalletOperatingMode` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `BridgeMoonbaseGrandpa::ImportedHeaders` (r:1 w:0)
	/// Proof: `BridgeMoonbaseGrandpa::ImportedHeaders` (`max_values`: None, `max_size`: Some(65568), added: 68043, mode: `MaxEncodedLen`)
	/// Storage: `BridgeMoonbaseParachain::ParasInfo` (r:1 w:1)
	/// Proof: `BridgeMoonbaseParachain::ParasInfo` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	/// Storage: `BridgeMoonbaseParachain::ImportedParaHashes` (r:1 w:1)
	/// Proof: `BridgeMoonbaseParachain::ImportedParaHashes` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `BridgeMoonbaseParachain::ImportedParaHeads` (r:0 w:1)
	/// Proof: `BridgeMoonbaseParachain::ImportedParaHeads` (`max_values`: None, `max_size`: Some(1092), added: 3567, mode: `MaxEncodedLen`)
	fn submit_parachain_heads_with_1kb_proof() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `451`
		//  Estimated: `69033`
		// Minimum execution time: 27_918_000 picoseconds.
		Weight::from_parts(28_589_000, 0)
			.saturating_add(Weight::from_parts(0, 69033))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `BridgeMoonbaseParachain::PalletOperatingMode` (r:1 w:0)
	/// Proof: `BridgeMoonbaseParachain::PalletOperatingMode` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `BridgeMoonbaseGrandpa::ImportedHeaders` (r:1 w:0)
	/// Proof: `BridgeMoonbaseGrandpa::ImportedHeaders` (`max_values`: None, `max_size`: Some(65568), added: 68043, mode: `MaxEncodedLen`)
	/// Storage: `BridgeMoonbaseParachain::ParasInfo` (r:1 w:1)
	/// Proof: `BridgeMoonbaseParachain::ParasInfo` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	/// Storage: `BridgeMoonbaseParachain::ImportedParaHashes` (r:1 w:1)
	/// Proof: `BridgeMoonbaseParachain::ImportedParaHashes` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `BridgeMoonbaseParachain::ImportedParaHeads` (r:0 w:1)
	/// Proof: `BridgeMoonbaseParachain::ImportedParaHeads` (`max_values`: None, `max_size`: Some(1092), added: 3567, mode: `MaxEncodedLen`)
	fn submit_parachain_heads_with_16kb_proof() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `451`
		//  Estimated: `69033`
		// Minimum execution time: 56_664_000 picoseconds.
		Weight::from_parts(58_969_000, 0)
			.saturating_add(Weight::from_parts(0, 69033))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}
