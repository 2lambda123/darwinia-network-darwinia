// This file is part of Darwinia.
//
// Copyright (C) 2018-2023 Darwinia Network
// SPDX-License-Identifier: GPL-3.0
//
// Darwinia is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Darwinia is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_elections_phragmen`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-12-05, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Xaviers-MacBook-Pro-16.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("pangoro-dev")`, DB CACHE: 1024

// Executed Command:
// target/release/darwinia
// benchmark
// pallet
// --header
// .maintain/license-header
// --heap-pages
// 4096
// --chain
// pangoro-dev
// --output
// runtime/pangoro/src/weights
// --pallet
// *
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_elections_phragmen`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_elections_phragmen::WeightInfo for WeightInfo<T> {
	/// Storage: `PhragmenElection::Candidates` (r:1 w:0)
	/// Proof: `PhragmenElection::Candidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::Members` (r:1 w:0)
	/// Proof: `PhragmenElection::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::RunnersUp` (r:1 w:0)
	/// Proof: `PhragmenElection::RunnersUp` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::Voting` (r:1 w:1)
	/// Proof: `PhragmenElection::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// The range of component `v` is `[1, 16]`.
	fn vote_equal(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `405 + v * (56 ±0)`
		//  Estimated: `4752 + v * (56 ±0)`
		// Minimum execution time: 31_000_000 picoseconds.
		Weight::from_parts(32_393_447, 0)
			.saturating_add(Weight::from_parts(0, 4752))
			// Standard Error: 5_858
			.saturating_add(Weight::from_parts(1_315, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 56).saturating_mul(v.into()))
	}
	/// Storage: `PhragmenElection::Candidates` (r:1 w:0)
	/// Proof: `PhragmenElection::Candidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::Members` (r:1 w:0)
	/// Proof: `PhragmenElection::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::RunnersUp` (r:1 w:0)
	/// Proof: `PhragmenElection::RunnersUp` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::Voting` (r:1 w:1)
	/// Proof: `PhragmenElection::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// The range of component `v` is `[2, 16]`.
	fn vote_more(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `385 + v * (56 ±0)`
		//  Estimated: `4752 + v * (56 ±0)`
		// Minimum execution time: 44_000_000 picoseconds.
		Weight::from_parts(45_725_572, 0)
			.saturating_add(Weight::from_parts(0, 4752))
			// Standard Error: 7_074
			.saturating_add(Weight::from_parts(31_751, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 56).saturating_mul(v.into()))
	}
	/// Storage: `PhragmenElection::Candidates` (r:1 w:0)
	/// Proof: `PhragmenElection::Candidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::Members` (r:1 w:0)
	/// Proof: `PhragmenElection::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::RunnersUp` (r:1 w:0)
	/// Proof: `PhragmenElection::RunnersUp` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::Voting` (r:1 w:1)
	/// Proof: `PhragmenElection::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// The range of component `v` is `[2, 16]`.
	fn vote_less(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `405 + v * (56 ±0)`
		//  Estimated: `4752 + v * (56 ±0)`
		// Minimum execution time: 44_000_000 picoseconds.
		Weight::from_parts(45_770_555, 0)
			.saturating_add(Weight::from_parts(0, 4752))
			// Standard Error: 8_808
			.saturating_add(Weight::from_parts(48_187, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 56).saturating_mul(v.into()))
	}
	/// Storage: `PhragmenElection::Voting` (r:1 w:1)
	/// Proof: `PhragmenElection::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	fn remove_voter() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `735`
		//  Estimated: `4752`
		// Minimum execution time: 46_000_000 picoseconds.
		Weight::from_parts(47_000_000, 0)
			.saturating_add(Weight::from_parts(0, 4752))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `PhragmenElection::Candidates` (r:1 w:1)
	/// Proof: `PhragmenElection::Candidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::Members` (r:1 w:0)
	/// Proof: `PhragmenElection::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::RunnersUp` (r:1 w:0)
	/// Proof: `PhragmenElection::RunnersUp` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[1, 30]`.
	fn submit_candidacy(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1116 + c * (36 ±0)`
		//  Estimated: `2592 + c * (37 ±0)`
		// Minimum execution time: 33_000_000 picoseconds.
		Weight::from_parts(35_050_506, 0)
			.saturating_add(Weight::from_parts(0, 2592))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 37).saturating_mul(c.into()))
	}
	/// Storage: `PhragmenElection::Candidates` (r:1 w:1)
	/// Proof: `PhragmenElection::Candidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[1, 30]`.
	fn renounce_candidacy_candidate(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `375 + c * (38 ±0)`
		//  Estimated: `1857 + c * (39 ±0)`
		// Minimum execution time: 29_000_000 picoseconds.
		Weight::from_parts(29_961_599, 0)
			.saturating_add(Weight::from_parts(0, 1857))
			// Standard Error: 7_022
			.saturating_add(Weight::from_parts(69_134, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 39).saturating_mul(c.into()))
	}
	/// Storage: `PhragmenElection::Members` (r:1 w:1)
	/// Proof: `PhragmenElection::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::RunnersUp` (r:1 w:1)
	/// Proof: `PhragmenElection::RunnersUp` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Prime` (r:1 w:1)
	/// Proof: `Council::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Proposals` (r:1 w:0)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Members` (r:0 w:1)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn renounce_candidacy_members() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1137`
		//  Estimated: `2622`
		// Minimum execution time: 40_000_000 picoseconds.
		Weight::from_parts(43_000_000, 0)
			.saturating_add(Weight::from_parts(0, 2622))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `PhragmenElection::RunnersUp` (r:1 w:1)
	/// Proof: `PhragmenElection::RunnersUp` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn renounce_candidacy_runners_up() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `700`
		//  Estimated: `2185`
		// Minimum execution time: 29_000_000 picoseconds.
		Weight::from_parts(33_000_000, 0)
			.saturating_add(Weight::from_parts(0, 2185))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Benchmark::Override` (r:0 w:0)
	/// Proof: `Benchmark::Override` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_member_without_replacement() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 500_000_000_000 picoseconds.
		Weight::from_parts(500_000_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `PhragmenElection::Members` (r:1 w:1)
	/// Proof: `PhragmenElection::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `PhragmenElection::RunnersUp` (r:1 w:1)
	/// Proof: `PhragmenElection::RunnersUp` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Prime` (r:1 w:1)
	/// Proof: `Council::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Proposals` (r:1 w:0)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Members` (r:0 w:1)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn remove_member_with_replacement() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1332`
		//  Estimated: `6172`
		// Minimum execution time: 66_000_000 picoseconds.
		Weight::from_parts(77_000_000, 0)
			.saturating_add(Weight::from_parts(0, 6172))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: `PhragmenElection::Voting` (r:301 w:300)
	/// Proof: `PhragmenElection::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::Members` (r:1 w:0)
	/// Proof: `PhragmenElection::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::RunnersUp` (r:1 w:0)
	/// Proof: `PhragmenElection::RunnersUp` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::Candidates` (r:1 w:0)
	/// Proof: `PhragmenElection::Candidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:300 w:300)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:300 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:300 w:300)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// The range of component `v` is `[150, 300]`.
	/// The range of component `d` is `[0, 150]`.
	fn clean_defunct_voters(v: u32, _d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `939 + v * (582 ±0)`
		//  Estimated: `4424 + v * (3762 ±0)`
		// Minimum execution time: 10_959_000_000 picoseconds.
		Weight::from_parts(11_179_000_000, 0)
			.saturating_add(Weight::from_parts(0, 4424))
			// Standard Error: 302_475
			.saturating_add(Weight::from_parts(45_043_884, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(v.into())))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 3762).saturating_mul(v.into()))
	}
	/// Storage: `PhragmenElection::Candidates` (r:1 w:1)
	/// Proof: `PhragmenElection::Candidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::Members` (r:1 w:1)
	/// Proof: `PhragmenElection::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::RunnersUp` (r:1 w:1)
	/// Proof: `PhragmenElection::RunnersUp` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::Voting` (r:301 w:0)
	/// Proof: `PhragmenElection::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Proposals` (r:1 w:0)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:17 w:17)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `PhragmenElection::ElectionRounds` (r:1 w:1)
	/// Proof: `PhragmenElection::ElectionRounds` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Members` (r:0 w:1)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Prime` (r:0 w:1)
	/// Proof: `Council::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[1, 30]`.
	/// The range of component `v` is `[1, 300]`.
	/// The range of component `e` is `[300, 4800]`.
	fn election_phragmen(c: u32, v: u32, e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + c * (3085 ±0) + e * (18 ±0) + v * (400 ±0)`
		//  Estimated: `83983 + c * (1738 ±10) + e * (5 ±0) + v * (2547 ±4)`
		// Minimum execution time: 727_000_000 picoseconds.
		Weight::from_parts(733_000_000, 0)
			.saturating_add(Weight::from_parts(0, 83983))
			// Standard Error: 2_866_365
			.saturating_add(Weight::from_parts(20_827_210, 0).saturating_mul(c.into()))
			// Standard Error: 285_379
			.saturating_add(Weight::from_parts(8_163_462, 0).saturating_mul(v.into()))
			// Standard Error: 18_307
			.saturating_add(Weight::from_parts(208_045, 0).saturating_mul(e.into()))
			.saturating_add(T::DbWeight::get().reads(12))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(v.into())))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 1738).saturating_mul(c.into()))
			.saturating_add(Weight::from_parts(0, 5).saturating_mul(e.into()))
			.saturating_add(Weight::from_parts(0, 2547).saturating_mul(v.into()))
	}
}
