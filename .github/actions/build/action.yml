name: "Build"

description: "Darwinia artifacts building action."

inputs:
  package:
    description: "cargo build package"
    required: false
    default: "darwinia"
  features:
    description: "build features"
    required: false
    default: ""
  suffix:
    description: "output file suffix"
    required: false
    default: ""
  build_dockerfile:
    description: "build dockerfile path"
    required: true
    default: ".maintain/docker/ubuntu:20.04.Dockerfile"
  enable_cache:
    description: "enable cache"
    required: false
    default: 'true'
  cache_shrink_script:
    description: "shrink cache script file path"
    required: false
    default: ".github/shrink-cache.sh"
  cache_prefix:
    description: "cache key prefix"
    required: false
    default: "darwinia"
  enable_tar_bz2:
    description: "enable package tar.bz2"
    required: false
    default: 'true'
  enable_tar_zst:
    description: "enable package tar.zst"
    required: false
    default: 'true'

outputs:
  PACKAGE_BINARY_BZ2:
    description: "Build package binary path (tar bz2)"
    value: ${{ steps.cargo_build.outputs.PACKAGE_BINARY_BZ2 }}
  PACKAGE_BINARY_ZST:
    description: "Build package binary path (tar zst)"
    value: ${{ steps.cargo_build.outputs.PACKAGE_BINARY_ZST }}

runs:
  using: "composite"
  steps:
    - name: Build image for compile
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ${{ inputs.build_dockerfile }}
        tags: darwinia-network/build-tool:latest

    - name: Cache cargo
      uses: actions/cache@v3
      if: ${{ inputs.enable_cache == 'true' }}
      with:
        path: |
          ./target
        key: ${{ inputs.cache_prefix }}-${{ runner.os }}-${{ hashFiles('rust-toolchain.toml') }}-${{ hashFiles('Cargo.lock') }}
        restore-keys: |
          ${{ inputs.cache_prefix }}-${{ runner.os }}-${{ hashFiles('rust-toolchain.toml') }}-
          ${{ inputs.cache_prefix }}-${{ runner.os }}-

    - name: Build
      shell: bash
      id: cargo_build
      run: |
        PACKAGE=${{ inputs.package }}
        FEATURES=${{ inputs.features }}
        SUFFIX=${{ inputs.suffix }}
        ENABLE_TAR_BZ2=${{ inputs.enable_tar_bz2 }}
        ENABLE_TAR_ZST=${{ inputs.enable_tar_zst }}

        docker run --rm \
          --name=build-darwinia \
          -v=$(pwd):/build \
          darwinia-network/build-tool:latest \
            cargo build --release --locked \
              ${PACKAGE:+--package=$PACKAGE} \
              ${FEATURES:+--features=$FEATURES}

        if [ -z "${PACKAGE}" ]; then
          exit 0
        fi

        DIST_PATH=build
        mkdir -p ${DIST_PATH}

        if [ "${ENABLE_TAR_BZ2}" == "true" ]; then
          PACKAGE_BINARY_BZ2=${DIST_PATH}/${PACKAGE}${SUFFIX:+-$SUFFIX}-x86_64-linux-gnu.tar.bz2
          tar cjSf ${PACKAGE_BINARY_BZ2} -C target/release ${PACKAGE}
          echo "PACKAGE_BINARY_BZ2=$PACKAGE_BINARY_BZ2" >> $GITHUB_OUTPUT
        fi

        if [ "${ENABLE_TAR_ZST}" == "true" ]; then
          PACKAGE_BINARY_ZST=${DIST_PATH}/${PACKAGE}${SUFFIX:+-$SUFFIX}-x86_64-linux-gnu.tar.zst
          tar cf ${PACKAGE_BINARY_ZST} -C target/release ${PACKAGE} -I zstd
          echo "PACKAGE_BINARY_ZST=$PACKAGE_BINARY_ZST" >> $GITHUB_OUTPUT
        fi

    - name: Shrink Cache
      shell: bash
      if: ${{ inputs.enable_cache == 'true' }}
      run: |
        docker run --rm \
          --name=build-darwinia \
          -v=$(pwd):/build \
          darwinia-network/build-tool:latest \
          ${{ inputs.cache_shrink_script }} release

