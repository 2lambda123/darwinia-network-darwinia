name: Release
#on:
#  push:
#    tags:
#      - "v*"

on:
  pull_request:

jobs:
  ##
  # Build the Rust package
  ##
  build-package:
    name: Build package
    runs-on: ubuntu-latest
    container:
      image: ubuntu:16.04
    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          apt update -y
          apt install --no-install-recommends -y \
            git curl ca-certificates \
            make gcc g++ clang-4.0

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: wasm32-unknown-unknown

      - name: Cache target
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build darwinia
        run: |
          echo "::set-output name=BUILD_AT::$(date --iso-8601=seconds)"
          cargo build --release --target x86_64-unknown-linux-gnu

      - name: Collect shared
        run: |
          mkdir -p shared
          mv target/x86_64-unknown-linux-gnu/release/darwinia shared/

      - name: Upload shared
        uses: actions/upload-artifact@v2.2.4
        with:
          name: darwinia-artifact
          path: shared

      - name: Optimize cache
        run: .github/optimize-cache.sh || exit 0

  ##
  # Generate subwasm info
  ##
  build-subwasm:
    name: Generate subwasm info
    runs-on: ubuntu-latest
    container:
      image: ubuntu:16.04
    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          apt update -y
          apt install --no-install-recommends -y \
            git curl ca-certificates \
            make gcc g++ clang-4.0

      - name: Install subwasm
        env:
          # Currently, Same with srtool version v0.9.18
          # https://github.com/paritytech/srtool/blob/v0.9.18/Dockerfile#L19
          SUBWASM_VERSION: 0.15.0
        run: |
          curl -L https://github.com/chevdor/subwasm/releases/download/v${SUBWASM_VERSION}/subwasm_linux_amd64_v${SUBWASM_VERSION}.deb \
            --output subwasm.deb && \
            sudo dpkg -i subwasm.deb && \
            subwasm --version

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: wasm32-unknown-unknown

      - name: Cache target
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build darwinia
        run: |
          echo "::set-output name=BUILD_AT::$(date --iso-8601=seconds)"
          cargo build --features on-chain-release-build --release --target x86_64-unknown-linux-gnu

      - name: Collect shared
        run: |
          mkdir -p shared/crab-runtime
          mkdir -p shared/darwinia-runtime
          mv target/x86_64-unknown-linux-gnu/release/wbuild/crab-runtime/*.wasm shared/crab-runtime
          mv target/x86_64-unknown-linux-gnu/release/wbuild/darwinia-runtime/*.wasm shared/darwinia-runtime

      - name: Generate subwasm info
        run: |
          Z_WASM_CRAB=shared/crab-runtime/*.compact.compressed.wasm
          Z_WASM_DARWINIA=shared/crawinia-runtime/*.compact.compressed.wasm

          echo 'crab-runtime compressed compact subwasm info'
          subwasm -j info $Z_WASM | tee shared/crab-runtime/crab-runtime.compact.compressed.json
          echo 'darwinia-runtime compressed compact subwasm info'
          subwasm -j info $Z_WASM | tee shared/darwinia-runtime/darwinia-runtime.compact.compressed.json

      - name: Upload shared
        uses: actions/upload-artifact@v2.2.4
        with:
          name: darwinia-artifact
          path: shared

      - name: Optimize cache
        run: .github/optimize-cache.sh || exit 0

  ##
  # Build and publish the Docker image
  ##
  build-docker-image:
    name: Build Docker image
    runs-on: ubuntu-latest
    needs: [build-package]
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: darwinia-artifact
          path: shared

      - name: Docker login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.QUAY_IO_BOT_USERNAME }}
          password: ${{ secrets.QUAY_IO_BOT_PASSWORD }}
          registry: quay.io

      - uses: olegtarasov/get-tag@v2.1
        id: tag-name
      - uses: benjlevesque/short-sha@v1.2
        id: short-sha
        with:
          length: 7

      ##
      # Uploading artifacts does not retain the file permissions,
      # binaries should regain the executive permission before packing.
      # See: https://github.com/actions/upload-artifact#permission-loss
      ##
      - name: Build and publish docker image
        run: |
          IMAGE_NAME=darwinia
          IMAGE_PREFIX=quay.io/darwinia-network
          IMAGE_PUSH_NAME_TAG=${IMAGE_PREFIX}/${IMAGE_NAME}:${GIT_TAG_NAME}
          IMAGE_PUSH_NAME_SHA=${IMAGE_PREFIX}/${IMAGE_NAME}:sha-${SHA}

          chmod +x shared/darwinia # REQUIRED, see above
          docker build \
            -t ${IMAGE_PUSH_NAME_TAG} \
            -t ${IMAGE_PUSH_NAME_SHA} \
            --build-arg CI_BUILD_AT=${{ needs.build-package.outputs.BUILD_AT }} \
            --build-arg CI_GIT_TAG=${GIT_TAG_NAME} \
            --build-arg CI_GIT_SHA=${{ github.sha }} \
            -f .maintain/docker/Dockerfile \
            .

          # docker push ${IMAGE_PUSH_NAME_TAG}
          # docker push ${IMAGE_PUSH_NAME_SHA}

  ##
  # Publish the release
  ##
  publish-release:
    name: Publish release
    runs-on: ubuntu-latest
    needs: [build-subwasm, build-docker-image]
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: darwinia-artifact
          path: shared

      - name: Prepare deploy folder
        run: |
          chmod +x shared/darwinia # REQUIRED, same as Docker image
          tar cf darwinia-x86_64-linux-gnu.tar.zst -C shared darwinia -I pzstd
          tar cjSf darwinia-x86_64-linux-gnu.tar.bz2 -C shared darwinia

          mkdir -p deploy
          mv darwinia-x86_64-linux-gnu.tar.zst deploy/
          mv darwinia-x86_64-linux-gnu.tar.bz2 deploy/

          mv shared/darwinia-runtime/*.compact.compressed.wasm deploy/
          mv shared/darwinia-runtime/*.compact.compressed.json deploy/

      - name: Hash file
        run: |
          (cd deploy && sha256sum * | tee sha256sums.txt)

      - uses: olegtarasov/get-tag@v2.1
        id: tag-name
      - uses: benjlevesque/short-sha@v1.2
        id: short-sha
        with:
          length: 7

      - name: Generate template data
        run: |
          PROPOSAL_CRAB_COMPRESSED=$(cat deploy/crab-runtime.compact.compressed.json | jq -r .proposal_hash)
          PROPOSAL_DARWINIA_COMPRESSED=$(cat deploy/darwinia-runtime.compact.compressed.json | jq -r .proposal_hash)

          IMAGE_NAME=darwinia
          IMAGE_PREFIX=quay.io/darwinia-network
          IMAGE_PUSH_NAME_TAG=${IMAGE_PREFIX}/${IMAGE_NAME}:${GIT_TAG_NAME}
          IMAGE_PUSH_NAME_SHA=${IMAGE_PREFIX}/${IMAGE_NAME}:sha-${SHA}

          echo 'Template data:'
          jq -n \
            --arg crab_proposal_compressed "$PROPOSAL_CRAB_COMPRESSED" \
            --arg darwinia_proposal_compressed "$PROPOSAL_DARWINIA_COMPRESSED" \
            --arg image_tag "$IMAGE_PUSH_NAME_TAG" \
            --arg image_sha "$IMAGE_PUSH_NAME_SHA" \
            --arg tag "$GIT_TAG_NAME" \
            --arg sha "$SHA" \
            '{
              crab_proposal_compressed: $crab_proposal_compressed,
              darwinia_proposal_compressed: $darwinia_proposal_compressed,
              image_tag: $image_tag,
              image_sha: $image_sha,
              tag: $tag,
              sha: $sha
            }' | tee shared/template_data.json

      - name: Render release page
        uses: jayamanikharyono/jinja-action@v0.1
        with:
          datafile: shared/template_data.json
          path: .github/release-template.md

      - name: Verify
        run: |
          set -xe
          cat .github/release-template.md
          ls -la deploy/

#      - name: Publish github release
#        uses: softprops/action-gh-release@v1
#        with:
#          files: |
#            deploy/*
#          body_path: ".github/release-template.md"
#          token: ${{ secrets.GITHUB_TOKEN }}

  clean-artifacts:
    name: Clean artifacts
    runs-on: ubuntu-latest
    needs: [publish-release]
    if: always()
    steps:
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: darwinia-artifact
